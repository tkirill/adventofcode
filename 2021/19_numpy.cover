    1: from itertools import combinations
    1: from utils import *
    1: import numpy as np
       
       
    2: X = np.array([
    1:     [1, 0, 0],
    1:     [0, 0, -1],
    1:     [0, 1, 0]])
    2: Y = np.array([
    1:     [0, 0, 1],
    1:     [0, 1, 0],
    1:     [-1, 0, 0]])
    2: Z = np.array([
    1:     [0, -1, 0],
    1:     [1, 0, 0],
    1:     [0, 0, 1]])
    1: ROTATIONS = [
    1:     np.eye(3, dtype=int), Z, Z@Z, Z@Z@Z,
    1:     X, X@Z, X@Z@Z, X@Z@Z@Z,
    1:     X@X, X@X@Z, X@X@Z@Z, X@X@Z@Z@Z,
    1:     X@X@X, X@X@X@Z, X@X@X@Z@Z, X@X@X@Z@Z@Z,
    1:     Y, Y@Z, Y@Z@Z, Y@Z@Z@Z,
    1:     Y@Y@Y, Y@Y@Y@Z, Y@Y@Y@Z@Z, Y@Y@Y@Z@Z@Z
       ]
       
       
    1: def is_shifted(s1, s2):
 7116:     set1 = set(map(tuple, s1))
4765665:     for x, y in product(s1, s2):
4758576:         delta = x - y
4758576:         counter = 0
128247100:         for v in s2+delta:
123488551:             if tuple(v) in set1:
4759755:                 counter += 1
4759755:                 if counter == 12:
   27:                     return delta
       
       
   30: scans = [np.array(x[1:]) for x in read('19_input.txt')]
   30: intersections = [[] for _ in range(len(scans))]
    1: q, visited = [0], {0}
   29: while q:
   28:     cur = q.pop()
  812:     for i in range(len(scans)):
  784:         if i != cur and i not in visited:
 7399:             for r in ROTATIONS:
 7116:                 tmp = (r @ scans[i].transpose()).transpose()
 7116:                 delta = is_shifted(scans[cur], tmp)
 7116:                 if delta is not None:
   27:                     print(cur, i, delta)
   27:                     print(r)
   27:                     print()
   27:                     intersections[cur].append((i, r, delta))
   27:                     q.append(i)
   27:                     visited.add(i)
   27:                     break
       
    1: scanners, beacons = [(0, 0, 0)]*len(scans), set()
    1: q = [(0, np.eye(3, dtype=int), np.zeros(3, dtype=int))]
   29: while q:
   28:     n, r, s = q.pop()
   28:     tmp = (r @ scans[n].transpose()).transpose() + s
   28:     beacons |= set(map(tuple, tmp))
   55:     for nn, nr, ns in intersections[n]:
   27:         q.append((nn, r@nr, (r@ns.transpose())+s))
   27:         scanners[nn] = (r@ns.transpose()).transpose() + s
    1: print('Star 1:', len(beacons))
  380: print('Star 2:', max(np.abs(x-y).sum() for x, y in combinations(scanners, 2)))
